name: Deploy to AWS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: blazorwithrules

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore
      
    - name: Run unit tests
      run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-and-push:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}-${{ github.event.inputs.environment || 'dev' }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [test, build-and-push]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: infrastructure/aws/cdk/package-lock.json
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Install CDK dependencies
      run: |
        cd infrastructure/aws/cdk
        npm ci
        
    - name: Bootstrap CDK
      run: |
        cd infrastructure/aws/cdk
        cdk bootstrap --context environment=${{ github.event.inputs.environment || 'dev' }}
        
    - name: Deploy CDK stack
      run: |
        cd infrastructure/aws/cdk
        cdk deploy --all --context environment=${{ github.event.inputs.environment || 'dev' }} --require-approval never

  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, build-and-push]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Update ECS service
      run: |
        CLUSTER_NAME="blazorwithrules-${{ github.event.inputs.environment || 'dev' }}"
        SERVICE_NAME="BlazorWithRules-${{ github.event.inputs.environment || 'dev' }}-Service"
        
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service $SERVICE_NAME \
          --force-new-deployment
        
    - name: Wait for deployment
      run: |
        CLUSTER_NAME="blazorwithrules-${{ github.event.inputs.environment || 'dev' }}"
        SERVICE_NAME="BlazorWithRules-${{ github.event.inputs.environment || 'dev' }}-Service"
        
        aws ecs wait services-stable \
          --cluster $CLUSTER_NAME \
          --services $SERVICE_NAME
          
    - name: Get deployment outputs
      id: outputs
      run: |
        STACK_NAME="BlazorWithRules-${{ github.event.inputs.environment || 'dev' }}"
        OUTPUTS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs" --output json)
        
        echo "outputs<<EOF" >> $GITHUB_OUTPUT
        echo "$OUTPUTS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Comment deployment status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const outputs = JSON.parse('${{ steps.outputs.outputs }}');
          const loadBalancer = outputs.find(o => o.OutputKey === 'LoadBalancerDNS');
          
          if (loadBalancer) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Deployment Complete!**
              
              **Environment:** ${{ github.event.inputs.environment || 'dev' }}
              **Load Balancer:** http://${loadBalancer.OutputValue}
              **Image:** ${{ needs.build-and-push.outputs.image-tag }}
              
              Your application is now running on AWS! üéâ`
            });
          }

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-application]
    if: always() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Notify success
      if: needs.deploy-application.result == 'success'
      run: |
        echo "‚úÖ Deployment to ${{ github.event.inputs.environment || 'dev' }} completed successfully!"
        
    - name: Notify failure
      if: needs.deploy-application.result == 'failure'
      run: |
        echo "‚ùå Deployment to ${{ github.event.inputs.environment || 'dev' }} failed!"
        exit 1
