@using Microsoft.AspNetCore.Components.Web
@inherits ErrorBoundaryBase
@inject ILogger<ErrorBoundary> Logger

<div class="error-boundary">
    @if (CurrentException is null)
    {
        @ChildContent
    }
    else
    {
        <div class="alert alert-danger d-flex align-items-center" role="alert">
            <div class="flex-shrink-0">
                <i class="bi bi-exclamation-triangle-fill" style="font-size: 1.5rem;"></i>
            </div>
            <div class="flex-grow-1 ms-3">
                <h4 class="alert-heading">Oops! Something went wrong</h4>
                <p class="mb-2">We encountered an unexpected error. Our team has been notified and is working to fix it.</p>
                
                @if (Environment.IsDevelopment())
                {
                    <details class="mt-3">
                        <summary class="fw-bold">Error Details (Development Only)</summary>
                        <div class="mt-2 p-3 bg-light border rounded">
                            <p class="mb-2"><strong>Error:</strong> @CurrentException.Message</p>
                            <p class="mb-0"><strong>Stack Trace:</strong></p>
                            <pre class="small text-muted">@CurrentException.StackTrace</pre>
                        </div>
                    </details>
                }
                
                <div class="mt-3">
                    <button class="btn btn-primary me-2" @onclick="Recover">
                        <i class="bi bi-arrow-clockwise"></i> Try Again
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="GoHome">
                        <i class="bi bi-house"></i> Go Home
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public new RenderFragment? ChildContent { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    [Inject] private IWebHostEnvironment Environment { get; set; } = default!;

    protected override Task OnErrorAsync(Exception exception)
    {
        // Log the error
        Logger.LogError(exception, "An error occurred in component tree: {ComponentType}", 
            ChildContent?.GetType().Name ?? "Unknown");

        return Task.CompletedTask;
    }

    private void GoHome()
    {
        NavigationManager.NavigateTo("/");
    }
}

<style>
    .error-boundary {
        min-height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
    }

    .error-boundary .alert {
        max-width: 600px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .error-boundary pre {
        max-height: 300px;
        overflow-y: auto;
        white-space: pre-wrap;
        word-break: break-word;
    }
</style>
