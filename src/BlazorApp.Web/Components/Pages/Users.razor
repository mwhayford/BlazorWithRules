@page "/users"
@inject IUserRepository UserRepository
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Users - BlazorApp</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h2 mb-1">User Management</h1>
                    <p class="text-muted mb-0">Manage all users in the system</p>
                </div>
                <button class="btn btn-primary">
                    <i class="bi bi-person-plus"></i> Add User
                </button>
            </div>
        </div>
    </div>

    @if (loading)
    {
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Statistics Cards -->
        <div class="row g-3 mb-4">
            <div class="col-xl-3 col-md-6">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="me-3">
                                <i class="bi bi-people fs-1 text-primary"></i>
                            </div>
                            <div>
                                <h3 class="mb-0">@users.Count</h3>
                                <p class="text-muted mb-0">Total Users</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-md-6">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="me-3">
                                <i class="bi bi-person-check fs-1 text-success"></i>
                            </div>
                            <div>
                                <h3 class="mb-0">@users.Count(u => u.IsActive)</h3>
                                <p class="text-muted mb-0">Active Users</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-md-6">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="me-3">
                                <i class="bi bi-shield-check fs-1 text-warning"></i>
                            </div>
                            <div>
                                <h3 class="mb-0">@users.Count(u => u.Role == "Administrator")</h3>
                                <p class="text-muted mb-0">Administrators</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-md-6">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="me-3">
                                <i class="bi bi-calendar-plus fs-1 text-info"></i>
                            </div>
                            <div>
                                <h3 class="mb-0">@users.Count(u => u.CreatedAt >= DateTime.Today.AddDays(-30))</h3>
                                <p class="text-muted mb-0">New This Month</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Users Table -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row align-items-center">
                            <div class="col">
                                <h5 class="card-title mb-0">Users (@filteredUsers.Count())</h5>
                            </div>
                            <div class="col-auto">
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="bi bi-search"></i>
                                    </span>
                                    <input type="text" class="form-control" placeholder="Search users..." 
                                           @bind="searchString" @oninput="FilterUsers" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>First Name</th>
                                        <th>Last Name</th>
                                        <th>Email</th>
                                        <th>Phone</th>
                                        <th>Role</th>
                                        <th>Status</th>
                                        <th>Created</th>
                                        <th>Last Login</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in filteredUsers.Take(25))
                                    {
                                        <tr>
                                            <td>@user.Id</td>
                                            <td>@user.FirstName</td>
                                            <td>@user.LastName</td>
                                            <td>
                                                <a href="mailto:@user.Email">@user.Email</a>
                                            </td>
                                            <td>@user.PhoneNumber</td>
                                            <td>
                                                <span class="badge @GetRoleBadgeClass(user.Role)">
                                                    @user.Role
                                                </span>
                                            </td>
                                            <td>
                                                <div class="form-check form-switch">
                                                    <input class="form-check-input" type="checkbox" 
                                                           checked="@user.IsActive" 
                                                           @onchange="@((ChangeEventArgs e) => ToggleUserStatus(user, (bool)e.Value!))" />
                                                </div>
                                            </td>
                                            <td>@user.CreatedAt.ToString("MM/dd/yyyy")</td>
                                            <td>
                                                @if (user.LastLoginAt.HasValue)
                                                {
                                                    @user.LastLoginAt.Value.ToString("MM/dd/yyyy HH:mm")
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Never</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                                                    <button class="btn btn-outline-primary" @onclick="() => ViewUser(user)">
                                                        <i class="bi bi-eye"></i>
                                                    </button>
                                                    <button class="btn btn-outline-secondary" @onclick="() => EditUser(user)">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger" @onclick="() => DeleteUser(user)">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        
                        @if (filteredUsers.Count() > 25)
                        {
                            <div class="alert alert-info">
                                <i class="bi bi-info-circle"></i>
                                Showing first 25 of @filteredUsers.Count() users. Use search to narrow results.
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool loading = true;
    private List<User> users = new();
    private IEnumerable<User> filteredUsers => FilterUserList();
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        loading = false;
    }

    private async Task LoadUsers()
    {
        try
        {
            var allUsers = await UserRepository.GetAllAsync();
            users = allUsers.ToList();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading users: {ex.Message}");
        }
    }

    private IEnumerable<User> FilterUserList()
    {
        var result = users.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchString))
        {
            result = result.Where(u => 
                u.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                u.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                u.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase));
        }

        return result;
    }

    private void FilterUsers()
    {
        StateHasChanged();
    }

    private string GetRoleBadgeClass(string role) => role switch
    {
        "Administrator" => "bg-danger",
        "Manager" => "bg-warning text-dark",
        "User" => "bg-info",
        _ => "bg-secondary"
    };

    private async Task ToggleUserStatus(User user, bool isActive)
    {
        try
        {
            user.IsActive = isActive;
            await UserRepository.UpdateAsync(user);
            await UserRepository.SaveChangesAsync();
            
            await JSRuntime.InvokeVoidAsync("alert", $"User {user.FullName} status updated successfully");
        }
        catch (Exception ex)
        {
            user.IsActive = !isActive; // Revert the change
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating user status: {ex.Message}");
            StateHasChanged();
        }
    }

    private async Task ViewUser(User user)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"View details for {user.FullName}");
    }

    private async Task EditUser(User user)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Edit {user.FullName}");
    }

    private async Task DeleteUser(User user)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete {user.FullName}? This action cannot be undone.");

        if (confirmed)
        {
            try
            {
                await UserRepository.DeleteAsync(user.Id);
                await UserRepository.SaveChangesAsync();
                await LoadUsers();
                
                await JSRuntime.InvokeVoidAsync("alert", $"User {user.FullName} deleted successfully");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting user: {ex.Message}");
            }
        }
    }
}